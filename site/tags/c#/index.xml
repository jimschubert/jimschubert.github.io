<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on I Prefer Jim</title>
    <link>https://www.ipreferjim.com/site/tags/c#/</link>
    <description>Recent content in C# on I Prefer Jim</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 12 Mar 2015 01:26:32 +0000</lastBuildDate>
    
	<atom:link href="https://www.ipreferjim.com/site/tags/c#/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tips for debugging a WiX MSI</title>
      <link>https://www.ipreferjim.com/site/2015/03/tips-for-debugging-a-wix-msi/</link>
      <pubDate>Thu, 12 Mar 2015 01:26:32 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2015/03/tips-for-debugging-a-wix-msi/</guid>
      <description>WiX is an excellent technology that simplifies the creation of MSI files using an XML abstraction on top of the Windows Installer APIs.</description>
    </item>
    
    <item>
      <title>Software Abstractions take Skill.</title>
      <link>https://www.ipreferjim.com/site/2014/12/software-abstractions-take-skill/</link>
      <pubDate>Tue, 09 Dec 2014 04:53:16 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2014/12/software-abstractions-take-skill/</guid>
      <description>I recently read Adaptive Code via C# and posted a review on Amazon:
 This book is a new favorite of mine.</description>
    </item>
    
    <item>
      <title>SOLID Principles Presentation</title>
      <link>https://www.ipreferjim.com/site/2014/11/solid-principles-presentation/</link>
      <pubDate>Wed, 12 Nov 2014 23:00:28 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2014/11/solid-principles-presentation/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Data at the root level is invalid. Line 1, position 1.</title>
      <link>https://www.ipreferjim.com/site/2014/09/data-at-the-root-level-is-invalid-line-1-position-1/</link>
      <pubDate>Sat, 06 Sep 2014 15:58:21 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2014/09/data-at-the-root-level-is-invalid-line-1-position-1/</guid>
      <description>Recently, I encountered a really weird problem with an XML document. I was trying to load a document from a string:</description>
    </item>
    
    <item>
      <title>ServiceStack’s Markdown Razor Engine. Wow.</title>
      <link>https://www.ipreferjim.com/site/2012/07/servicestacks-markdown-razor-engine-wow/</link>
      <pubDate>Sun, 15 Jul 2012 16:08:38 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2012/07/servicestacks-markdown-razor-engine-wow/</guid>
      <description>ServiceStack is a pretty sweet-looking alternative to WCF. It provides strongly-typed, well-designed, REST/RCP+SOAP services for .NET and Mono. Check out the README in the repository to see how ridiculously easy it is to setup a service.</description>
    </item>
    
    <item>
      <title>Proxy Objects</title>
      <link>https://www.ipreferjim.com/site/2012/07/proxy-objects/</link>
      <pubDate>Sat, 07 Jul 2012 23:33:27 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2012/07/proxy-objects/</guid>
      <description>&lt;p&gt;I started to familiarize myself with proxy objects a couple of years ago when I started used Fluent NHibernate on a pretty large project. NHibernate itself proxies objects to allow the framework to do its magic. Proxies are a fantastic thing. I spoke with a friend of mine today about some advanced coding techniques including proxy objects and IoC, which made me want to write a little about some of those topics.&lt;/p&gt;
&lt;p&gt;From &lt;a href=&#34;http://en.wikipedia.org/wiki/Proxy_pattern&#34; title=&#34;Proxy pattern on Wikipedia&#34; target=&#34;_blank&#34;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A proxy, in its most general form, is a class functioning as an interface to something else. The proxy could interface to anything: a network connection, a large object in memory, a file, or some other resource that is expensive or impossible to duplicate.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Charles Bretana gave an excellent and succinct definition of proxy objects &lt;a href=&#34;http://stackoverflow.com/questions/287479/what-is-a-net-proxy-object-in-the-inversion-of-control-aspect-oriented-sense&#34; title=&#34;Click to view What is a .NET proxy object in the Inversion of Control / Aspect-Oriented sense?&#34; target=&#34;_blank&#34;&gt;on Stack Overflow&lt;/a&gt; back in 2008:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One purpose is to “pretend” to be the real class so a client component (or object) can “believe” it’s talking to the “real” object, but inside the proxy, other stuff, (like logging, transactional support, etc.) is being done at the same time… Secondly, a proxy can be very cheap in comparson to the real object,. and often is used so that the real objects can be conserved (turned off or released to a pool to be used by other clients) when the client is not using them… The proxy stays “alive” and the client thinks it still has a connection to the real object, but whenever it “calls” the object, it is actually calling the proxy, which goes and gets another real object just to handle the call, and then releases the real object when the call is done.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I’ve created an example (available &lt;a href=&#34;https://github.com/jimschubert/blogs/tree/master/2012-07-07/Proxies&#34; title=&#34;Proxies examples on github&#34; target=&#34;_blank&#34;&gt;on github&lt;/a&gt;) which demonstrates how to proxy method calls in a few different ways, ranging from very simple to using Castle.DynamicProxy and interceptors. The code is written in C# and although the code doesn’t handle some of the more advanced topics of proxy objects, such as resource pooling as Charles described, it will (I hope) introduce proxy objects in a comprehensible way.&lt;/p&gt;
&lt;p&gt;Read on for killer examples.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Debug.WriteLine</title>
      <link>https://www.ipreferjim.com/site/2012/06/debug-writeline/</link>
      <pubDate>Fri, 15 Jun 2012 22:21:34 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2012/06/debug-writeline/</guid>
      <description>I answered a question on StackOverflow last week which made me remember a few years ago when I also wondered, “Where does Debug.</description>
    </item>
    
    <item>
      <title>ASP.NET, AppDomains, and shadow-copying</title>
      <link>https://www.ipreferjim.com/site/2012/04/asp-net-appdomains-and-shadow-copying/</link>
      <pubDate>Sun, 29 Apr 2012 22:05:28 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2012/04/asp-net-appdomains-and-shadow-copying/</guid>
      <description>&lt;p&gt;I answered a &lt;a href=&#34;http://stackoverflow.com/a/4394472/151445&#34; title=&#34;Does my ASP.NET application stop executing if I overwrite the DLLs?&#34; target=&#34;_blank&#34;&gt;question on StackOverflow&lt;/a&gt; nearly two years ago, and I’m surprised at how few votes it has received, despite comments such as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;+1 for teaching me something new today thanks. -kobe&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Being one of my favorite answers, I thought I should discuss it on my blog a little more in-depth than just &lt;a href=&#34;http://www.ipreferjim.com/2011/07/what-happens-when-i-overwrite-a-dll-asp-net/&#34; title=&#34;Previous post&#34; target=&#34;_blank&#34;&gt;posting the SO answer&lt;/a&gt;. I’d like to briefly discuss what ASP.NET really is (in the context of IIS), why AppDomains are needed, and lastly what shadow-copying does for an application. There is no code associated with this post, and it is driven more by contemplation than by a specific resolution to a problem. So, I apologize in advance if it seems disjointed at times.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Allowing only a single instance of a .NET application</title>
      <link>https://www.ipreferjim.com/site/2012/04/allowing-only-a-single-instance-of-a-net-application/</link>
      <pubDate>Mon, 23 Apr 2012 23:13:32 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2012/04/allowing-only-a-single-instance-of-a-net-application/</guid>
      <description>In the past, whenever I constrained an application to having only a single instance running at any given time, I naively walked a list of running processes to find a process with the same name as the currently-running process.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Global _CRT_SECURE_NO_WARNINGS</title>
      <link>https://www.ipreferjim.com/site/2012/04/c-global-_crt_secure_no_warnings/</link>
      <pubDate>Mon, 16 Apr 2012 20:43:09 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2012/04/c-global-_crt_secure_no_warnings/</guid>
      <description>I became extremely annoyed by thousands of these messages while running MSBuild:
c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\string.h(105) : see declaration of &#39;strcpy&#39; SomeFile.</description>
    </item>
    
    <item>
      <title>C# Null-Coalescing (??) operator</title>
      <link>https://www.ipreferjim.com/site/2012/03/c-null-coalescing-operator/</link>
      <pubDate>Mon, 19 Mar 2012 01:39:38 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2012/03/c-null-coalescing-operator/</guid>
      <description>The null-coalescing operator (??) is one of my favorites, and I see so few developers using it.
MSDN defines the null-coalescing operator as</description>
    </item>
    
    <item>
      <title>Visual Studio and Interface property stubs</title>
      <link>https://www.ipreferjim.com/site/2011/11/visual-studio-and-interface-property-stubs/</link>
      <pubDate>Sat, 12 Nov 2011 23:53:38 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2011/11/visual-studio-and-interface-property-stubs/</guid>
      <description>Last year, I posted a question on StackOverflow asking if it was possible to replace the property stubs for interface refactoring</description>
    </item>
    
    <item>
      <title>propv.snippet for creating Automatic virtual properties in C#</title>
      <link>https://www.ipreferjim.com/site/2011/09/propv-snippet/</link>
      <pubDate>Fri, 23 Sep 2011 13:21:34 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2011/09/propv-snippet/</guid>
      <description>I’m all about saving time. I have a huge collection of helpful snippets. Here’s one that automatically creates a virtual property, which is really helpful if you use Castle’s DynamicProxy (NHibernate uses this).</description>
    </item>
    
    <item>
      <title>testy C# Test Method Snippet</title>
      <link>https://www.ipreferjim.com/site/2011/08/testy-c-test-method-snippet/</link>
      <pubDate>Tue, 30 Aug 2011 13:06:47 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2011/08/testy-c-test-method-snippet/</guid>
      <description>This is a pretty trivial snippet, but I use it quite a lot.
Save this file as testy.snippet in your [Visual Studio]\VC#\Snippets\1033\Test directory.</description>
    </item>
    
    <item>
      <title>[c#] Instantiating an object with a private constructor</title>
      <link>https://www.ipreferjim.com/site/2011/08/c-instantiating-an-object-with-a-private-constructor/</link>
      <pubDate>Sat, 27 Aug 2011 18:26:43 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2011/08/c-instantiating-an-object-with-a-private-constructor/</guid>
      <description>Not too long ago, I needed to modify a type available in the the BCL which didn’t have a public constructor or any method for creating an instance of the object.</description>
    </item>
    
    <item>
      <title>DataAnnotations, MVC 3, and Unobtrusive Validations</title>
      <link>https://www.ipreferjim.com/site/2011/08/dataannotations-mvc3-unobtrusive-validations/</link>
      <pubDate>Mon, 15 Aug 2011 01:00:14 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2011/08/dataannotations-mvc3-unobtrusive-validations/</guid>
      <description>&lt;p&gt;DataAnnotations are a pretty cool introduction to .NET 3.5+. It is very useful in ASP.NET MVC 3, and I’ve written a somewhat &lt;a href=&#34;http://www.ipreferjim.com/2010/05/system-componentmodel-dataannotations-for-asp-net-web-forms/&#34; title=&#34;System.ComponentModel.DataAnnotations for ASP.NET Web Forms&#34; target=&#34;_blank&#34;&gt;naive attempt&lt;/a&gt; to use this functionality in ASP.NET Web Forms which some people have found very useful.&lt;/p&gt;
&lt;p&gt;I’d like to dig a little more in depth…&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bitwise Operations: Examples</title>
      <link>https://www.ipreferjim.com/site/2011/07/bitwise-operations-examples/</link>
      <pubDate>Tue, 19 Jul 2011 22:57:08 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2011/07/bitwise-operations-examples/</guid>
      <description>One post that I’ve always loved on stackoverflow is this post by Hugoware which contains some useful extension methods for bitwise operations.</description>
    </item>
    
    <item>
      <title>What happens when I overwrite a DLL (asp.net)?</title>
      <link>https://www.ipreferjim.com/site/2011/07/what-happens-when-i-overwrite-a-dll-asp-net/</link>
      <pubDate>Sat, 09 Jul 2011 00:46:00 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2011/07/what-happens-when-i-overwrite-a-dll-asp-net/</guid>
      <description>&lt;p&gt;I post on &lt;a href=&#34;http://stackoverflow.com/&#34; title=&#34;Stack Overflow&#34; target=&#34;_blank&#34;&gt;Stack Overflow&lt;/a&gt; a lot. Sometimes, there are really interesting questions like one I answered last year. I had forgotten about it until this week when the answer was accepted. I thought I’d share it on my blog.&lt;/p&gt;
&lt;p&gt;The original post is &lt;a href=&#34;http://stackoverflow.com/questions/4394410/does-my-asp-net-application-stop-executing-if-i-overwrite-the-dlls/4394472#4394472&#34; title=&#34;Does my ASP.NET application stop executing if I overwrite the DLLs?&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;. Read on for redundancy.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bitwise operations and Flags (C#)</title>
      <link>https://www.ipreferjim.com/site/2010/07/bitwise-operations-and-flags/</link>
      <pubDate>Sat, 31 Jul 2010 15:57:51 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2010/07/bitwise-operations-and-flags/</guid>
      <description>&lt;p&gt;I haven’t written anything in a while, so I thought I would finally write about the subject of bitwise operations and the FlagsAttribute.&lt;/p&gt;
&lt;p&gt;I mentioned this to one of the developers on my team, and he said that he somewhat understood bit operations but he had never found a reason to use them.&lt;/p&gt;
&lt;p&gt;Here is the code I will use to discuss the operations&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;57754&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;18782&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
			
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aXORb&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aORb&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aANDb&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aNOT&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bNOT&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
			
&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;spacer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;---------------------------------------------&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} ({1}) a&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} ({1}) b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} ({1}) a ^ b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aXORb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aXORb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spacer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;	
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} ({1}) a&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} ({1}) b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} ({1}) a | b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aORb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aORb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spacer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;	
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} ({1}) a&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} ({1}) b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} ({1}) a &amp;amp; b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aANDb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aANDb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spacer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;	
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} ({1}) a&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} ({1}) ~a&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aNOT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aNOT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} ({1}) ~(~a)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aNOT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aNOT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spacer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;	
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} ({1}) b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} ({1}) ~b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bNOT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bNOT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} ({1}) ~(~b)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bNOT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bNOT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
			
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReadLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// And, the GetBitString method
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
	&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sizeInt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// Number of bits is bytes * 8
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// I specifically chose 16-bit values to reduce the amount displayed
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sizeInt&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;ushort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	
	&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Empty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sizeInt&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sizeInt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;--)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sizeInt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sizeInt&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;XOR ( ^ )&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From MSDN:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Binary ^ operators are predefined for the integral types and bool. For integral types, ^ computes the bitwise exclusive-OR of its operands. For bool operands, ^ computes the logical exclusive-or of its operands; that is, the result is true if and only if exactly one of its operands is true.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think of XOR as a “one-toggle”. The logic can be seen as (format is [first] : [second] –&amp;gt; [result] ):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0 : 1 --&amp;gt; 1
1 : 1 --&amp;gt; 0
1 : 0 --&amp;gt; 1
0 : 0 --&amp;gt; 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see,&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using DataAnnotation attributes to validate Membership password</title>
      <link>https://www.ipreferjim.com/site/2010/06/using-dataannotation-attributes-to-validate-membership-password/</link>
      <pubDate>Fri, 11 Jun 2010 19:14:59 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2010/06/using-dataannotation-attributes-to-validate-membership-password/</guid>
      <description>As a follow-up to my post on DataAnnotations in ASP.NET Web Forms, I’d like to demonstrate yet another custom attribute. Although ASP.</description>
    </item>
    
    <item>
      <title>System.ComponentModel.DataAnnotations for ASP.NET Web Forms</title>
      <link>https://www.ipreferjim.com/site/2010/05/system-componentmodel-dataannotations-for-asp-net-web-forms/</link>
      <pubDate>Thu, 27 May 2010 01:50:19 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2010/05/system-componentmodel-dataannotations-for-asp-net-web-forms/</guid>
      <description>Although I’m primarily an ASP.NET Web Forms developer, I regularly dabble in new and interesting technologies. I’ve toyed with other Microsoft technologies such as ASP.</description>
    </item>
    
    <item>
      <title>Finding a user’s local time from UTC offset</title>
      <link>https://www.ipreferjim.com/site/2010/05/finding-a-users-local-time-from-utc-offset/</link>
      <pubDate>Tue, 04 May 2010 19:47:43 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2010/05/finding-a-users-local-time-from-utc-offset/</guid>
      <description>I answered a question over at StackOverflow, and I really liked the answer, so I thought I would share this nifty extension method:</description>
    </item>
    
    <item>
      <title>NHibernate.Criterion Extensions workaround</title>
      <link>https://www.ipreferjim.com/site/2010/05/nhibernate-criterion-extensions-workaround/</link>
      <pubDate>Mon, 03 May 2010 22:30:50 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2010/05/nhibernate-criterion-extensions-workaround/</guid>
      <description>I’ve been working with Fluent NHibernate for the past month or so, and I realized while writing an NHibernate query that the NHibernate Criterion’s Restrictions class isn’t very refactor-friendly.</description>
    </item>
    
    <item>
      <title>CopyCat Rails’ Time Extensions</title>
      <link>https://www.ipreferjim.com/site/2010/05/copycat-activesupport-time-extensions/</link>
      <pubDate>Mon, 03 May 2010 21:22:47 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2010/05/copycat-activesupport-time-extensions/</guid>
      <description>I’ve become a fan of Ruby’s simple syntax. My favorite thing is the ActiveSupport’s Numeric Time Extensions. I’m starting a library of useful extensions, and I’m going to be adding a number of shortcuts to mock these extensions.</description>
    </item>
    
    <item>
      <title>DRY! GenericComparer&lt;TType&gt; for sorting Generic Lists</title>
      <link>https://www.ipreferjim.com/site/2010/04/dry-genericcomparer-for-sorting-generic-lists/</link>
      <pubDate>Thu, 22 Apr 2010 15:28:40 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2010/04/dry-genericcomparer-for-sorting-generic-lists/</guid>
      <description>I’m a pretty firm believer in the Ruby/Ruby on Rails idea of DRY (“Don’t Repeat Yourself”).
That said, I get pretty tired of writing comparers for sorting lists and generic lists.</description>
    </item>
    
    <item>
      <title>String Concatenation in .NET – what really goes on?</title>
      <link>https://www.ipreferjim.com/site/2010/03/string-concatenation-in-net-what-really-goes-on/</link>
      <pubDate>Sun, 21 Mar 2010 23:04:48 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2010/03/string-concatenation-in-net-what-really-goes-on/</guid>
      <description>There are a number of ways to concatenate a string in C# and other .NET languages. Is there a *best* way?</description>
    </item>
    
    <item>
      <title>Programming to Interfaces or Objects?</title>
      <link>https://www.ipreferjim.com/site/2010/03/programming-to-interfaces-or-objects/</link>
      <pubDate>Sun, 21 Mar 2010 04:46:31 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2010/03/programming-to-interfaces-or-objects/</guid>
      <description>The other day, I was asked to add some functionality to code that regularly instantiates objects as interfaces, and I was wondering what exactly is the point?</description>
    </item>
    
    <item>
      <title>log4net configuration in .NET 3.5</title>
      <link>https://www.ipreferjim.com/site/2010/03/log4net-configuration-in-net-3-5/</link>
      <pubDate>Mon, 01 Mar 2010 23:17:33 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2010/03/log4net-configuration-in-net-3-5/</guid>
      <description>Step 1 Add Reference
Right click on the “References” folder and choose add reference. Browse to the location of log4net and add it to the project.</description>
    </item>
    
    <item>
      <title>Basics: Posting data to a remote server via .NET</title>
      <link>https://www.ipreferjim.com/site/2010/02/posting-data-to-a-remove-server-via-net/</link>
      <pubDate>Sat, 20 Feb 2010 01:57:02 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2010/02/posting-data-to-a-remove-server-via-net/</guid>
      <description>Class for Remote Posting:
public class RemotePost { #region Fields and Properties  private string _url; private string _postData; private byte[] _data; /// &amp;lt;summary&amp;gt;  /// URL to which the Post is sent  /// &amp;lt;/summary&amp;gt;  public string Url { get { if (!</description>
    </item>
    
    <item>
      <title>Explaining advanced features of C# 3.0</title>
      <link>https://www.ipreferjim.com/site/2010/02/explaining-advanced-features-of-c-3-0/</link>
      <pubDate>Mon, 15 Feb 2010 23:07:30 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2010/02/explaining-advanced-features-of-c-3-0/</guid>
      <description>C# 3.0 Func delegates and Expressions In this post, I’ll attempt to clarify the meaning of Func delegates and Expressions.</description>
    </item>
    
    <item>
      <title>Quickly create a Dictionary using Linq to Objects</title>
      <link>https://www.ipreferjim.com/site/2010/02/quickly-create-a-dictionary-using-linq-to-objects/</link>
      <pubDate>Wed, 10 Feb 2010 15:43:00 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2010/02/quickly-create-a-dictionary-using-linq-to-objects/</guid>
      <description>When working with collections or lists, sometimes you just need to get a simple dictionary.
There are a number of ways to do this, but the ToDictionary method seems promising.</description>
    </item>
    
    <item>
      <title>Extending IDataReader</title>
      <link>https://www.ipreferjim.com/site/2009/12/extending-idatareader/</link>
      <pubDate>Wed, 16 Dec 2009 18:01:00 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2009/12/extending-idatareader/</guid>
      <description>I like to access my DataReader objects via column name. Unfortunately, IDataReader supports getting items via integer indexer.
To overcome this *obstacle*, I’ve written an extension method I’d like to share.</description>
    </item>
    
    <item>
      <title>Storing Generics in ASP.NET Profile object</title>
      <link>https://www.ipreferjim.com/site/2009/04/storing-generics-in-asp-net-profile-object/</link>
      <pubDate>Sat, 25 Apr 2009 19:34:00 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2009/04/storing-generics-in-asp-net-profile-object/</guid>
      <description>Sometimes, I’ll come across a problem that I research for an hour or two. When I find the solution, I think “Wow, that should have been the first thing I tried!</description>
    </item>
    
    <item>
      <title>Displaying multiple fields in a Dropdownlist’s DataTextField</title>
      <link>https://www.ipreferjim.com/site/2009/04/displaying-multiple-fields-in-a-dropdownlists-datatextfield/</link>
      <pubDate>Tue, 14 Apr 2009 20:19:00 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2009/04/displaying-multiple-fields-in-a-dropdownlists-datatextfield/</guid>
      <description>I’ve encountered this problem on occasion, where I want to display more than one field in a dropdownlist’s DataTextField property. In the past, I’ve overcome this problem by rewriting a SQL statement, or adding another column in the database itself to accomodate my needs.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Templated QuickSort Algorithm</title>
      <link>https://www.ipreferjim.com/site/2009/03/c-templated-quicksort-algorithm/</link>
      <pubDate>Thu, 19 Mar 2009 13:17:00 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2009/03/c-templated-quicksort-algorithm/</guid>
      <description>It has been over a month since I posted. I’ve been really busy with all of my classes.
So, instead of going too in depth with anything, I’m just going to share some code we’ve written.</description>
    </item>
    
    <item>
      <title>My beginnings in C&#43;&#43;</title>
      <link>https://www.ipreferjim.com/site/2009/02/my-beginnings-in-c/</link>
      <pubDate>Tue, 03 Feb 2009 04:26:00 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2009/02/my-beginnings-in-c/</guid>
      <description>This semester (my final semester at VCU), I am taking INFO 450: Advanced Programming, which concentrates in C++. We’re learning both native and managed C++.</description>
    </item>
    
    <item>
      <title>C# Insertion Sorting algorithm</title>
      <link>https://www.ipreferjim.com/site/2009/02/c-insertion-sorting-algorithm/</link>
      <pubDate>Mon, 02 Feb 2009 22:12:00 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2009/02/c-insertion-sorting-algorithm/</guid>
      <description>Here is a console application to test an Insertion Sorting algorithm adapted from chapter 2 of MIT’s Introduction to Algorithms. I thought this might come in handy for any beginners, as well as a fun way to test your computer’s performance.</description>
    </item>
    
    <item>
      <title>.NET development</title>
      <link>https://www.ipreferjim.com/site/2008/12/net-development/</link>
      <pubDate>Sat, 13 Dec 2008 15:55:00 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2008/12/net-development/</guid>
      <description>I consider myself a .NET developer. I don’t consider myself good at it. There are always things to learn, and new facets of development that I didn’t realize existed.</description>
    </item>
    
    <item>
      <title>C# Insertion Sorting alrgorithm.</title>
      <link>https://www.ipreferjim.com/site/2008/02/c-insertion-sorting-alrgorithm/</link>
      <pubDate>Thu, 14 Feb 2008 02:39:12 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2008/02/c-insertion-sorting-alrgorithm/</guid>
      <description>using System; using System.Collections.Generic; using System.Linq; using System.Text; namespace InsertionSorting { class Program { static void Main(string[] args) { // int[] A = {5, 2, 4, 6, 1, 3};  int initializer = 100000; int[] A = new int[initializer]; for (int my = 0; my &amp;lt; A.</description>
    </item>
    
  </channel>
</rss>