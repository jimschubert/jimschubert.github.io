<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reflection on I Prefer Jim</title>
    <link>https://www.ipreferjim.com/site/tags/reflection/</link>
    <description>Recent content in Reflection on I Prefer Jim</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 07 Jul 2012 23:33:27 +0000</lastBuildDate>
    
	<atom:link href="https://www.ipreferjim.com/site/tags/reflection/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Proxy Objects</title>
      <link>https://www.ipreferjim.com/site/2012/07/proxy-objects/</link>
      <pubDate>Sat, 07 Jul 2012 23:33:27 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2012/07/proxy-objects/</guid>
      <description>&lt;p&gt;I started to familiarize myself with proxy objects a couple of years ago when I started used Fluent NHibernate on a pretty large project. NHibernate itself proxies objects to allow the framework to do its magic. Proxies are a fantastic thing. I spoke with a friend of mine today about some advanced coding techniques including proxy objects and IoC, which made me want to write a little about some of those topics.&lt;/p&gt;
&lt;p&gt;From &lt;a href=&#34;http://en.wikipedia.org/wiki/Proxy_pattern&#34; title=&#34;Proxy pattern on Wikipedia&#34; target=&#34;_blank&#34;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A proxy, in its most general form, is a class functioning as an interface to something else. The proxy could interface to anything: a network connection, a large object in memory, a file, or some other resource that is expensive or impossible to duplicate.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Charles Bretana gave an excellent and succinct definition of proxy objects &lt;a href=&#34;http://stackoverflow.com/questions/287479/what-is-a-net-proxy-object-in-the-inversion-of-control-aspect-oriented-sense&#34; title=&#34;Click to view What is a .NET proxy object in the Inversion of Control / Aspect-Oriented sense?&#34; target=&#34;_blank&#34;&gt;on Stack Overflow&lt;/a&gt; back in 2008:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One purpose is to “pretend” to be the real class so a client component (or object) can “believe” it’s talking to the “real” object, but inside the proxy, other stuff, (like logging, transactional support, etc.) is being done at the same time… Secondly, a proxy can be very cheap in comparson to the real object,. and often is used so that the real objects can be conserved (turned off or released to a pool to be used by other clients) when the client is not using them… The proxy stays “alive” and the client thinks it still has a connection to the real object, but whenever it “calls” the object, it is actually calling the proxy, which goes and gets another real object just to handle the call, and then releases the real object when the call is done.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I’ve created an example (available &lt;a href=&#34;https://github.com/jimschubert/blogs/tree/master/2012-07-07/Proxies&#34; title=&#34;Proxies examples on github&#34; target=&#34;_blank&#34;&gt;on github&lt;/a&gt;) which demonstrates how to proxy method calls in a few different ways, ranging from very simple to using Castle.DynamicProxy and interceptors. The code is written in C# and although the code doesn’t handle some of the more advanced topics of proxy objects, such as resource pooling as Charles described, it will (I hope) introduce proxy objects in a comprehensible way.&lt;/p&gt;
&lt;p&gt;Read on for killer examples.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[c#] Instantiating an object with a private constructor</title>
      <link>https://www.ipreferjim.com/site/2011/08/c-instantiating-an-object-with-a-private-constructor/</link>
      <pubDate>Sat, 27 Aug 2011 18:26:43 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/site/2011/08/c-instantiating-an-object-with-a-private-constructor/</guid>
      <description>Not too long ago, I needed to modify a type available in the the BCL which didn’t have a public constructor or any method for creating an instance of the object.</description>
    </item>
    
  </channel>
</rss>