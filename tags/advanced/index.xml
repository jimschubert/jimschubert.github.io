<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Advanced on I Prefer Jim</title>
    <link>https://www.ipreferjim.com/tags/advanced/</link>
    <description>Recent content in Advanced on I Prefer Jim</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 21 Mar 2017 21:55:34 +0000</lastBuildDate>
    
	<atom:link href="https://www.ipreferjim.com/tags/advanced/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Prototyping a Flags/Bitmasks implementation in Kotlin 1.1.1</title>
      <link>https://www.ipreferjim.com/2017/03/prototyping-a-flagsbitmasks-implementation-in-kotlin-1-1-1/</link>
      <pubDate>Tue, 21 Mar 2017 21:55:34 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2017/03/prototyping-a-flagsbitmasks-implementation-in-kotlin-1-1-1/</guid>
      <description>One of my more favorite features of C# is the use of FlagsAttribute. If you’re not familiar with the concept, [Flags] allows you to treat an integral enum type as a bitmask.</description>
    </item>
    
    <item>
      <title>Finding Wakelocks in Android 7 using Google’s Battery Historian</title>
      <link>https://www.ipreferjim.com/2016/10/finding-wakelocks-in-android-7-using-googles-battery-historian/</link>
      <pubDate>Mon, 03 Oct 2016 15:51:28 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2016/10/finding-wakelocks-in-android-7-using-googles-battery-historian/</guid>
      <description>One of my favorite apps prior to my upgrade to Android 7 (Nougat) was GSam Battery Monitor (the paid version is fully worth it).</description>
    </item>
    
    <item>
      <title>Ignoring files with Swagger Codegen</title>
      <link>https://www.ipreferjim.com/2016/05/ignoring-files-with-swagger-codegen/</link>
      <pubDate>Mon, 23 May 2016 00:04:24 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2016/05/ignoring-files-with-swagger-codegen/</guid>
      <description>I’m proud to announce that I’m now a member of the Swagger Codegen Core team.
I’ve previously refactored the C# client, the maven plugin, added an ASP.</description>
    </item>
    
    <item>
      <title>[javascript] Be sure to read documentation carefully…</title>
      <link>https://www.ipreferjim.com/2015/05/javascript-be-sure-to-read-documentation-carefully/</link>
      <pubDate>Sun, 10 May 2015 02:28:38 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2015/05/javascript-be-sure-to-read-documentation-carefully/</guid>
      <description>I have a love-hate relationship with JavaScript. I love the language, but I hate the idiosyncrasies. And like many others, I use MDN pretty regularly to verify function signatures, browser support, or to find example code or shims.</description>
    </item>
    
    <item>
      <title>Review: Microsoft .NET – Architecting Applications for the Enterprise, 2nd Edition</title>
      <link>https://www.ipreferjim.com/2015/03/review-microsoft-net-architecting-applications-for-the-enterprise-2nd-edition/</link>
      <pubDate>Fri, 13 Mar 2015 16:53:05 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2015/03/review-microsoft-net-architecting-applications-for-the-enterprise-2nd-edition/</guid>
      <description>I’ve recently finished reading Microsoft .NET – Architecting Applications for the Enterprise, 2nd Edition by Dino Esposito and Andrea Saltarello. This book caught my attention for two reasons.</description>
    </item>
    
    <item>
      <title>Tips for debugging a WiX MSI</title>
      <link>https://www.ipreferjim.com/2015/03/tips-for-debugging-a-wix-msi/</link>
      <pubDate>Thu, 12 Mar 2015 01:26:32 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2015/03/tips-for-debugging-a-wix-msi/</guid>
      <description>WiX is an excellent technology that simplifies the creation of MSI files using an XML abstraction on top of the Windows Installer APIs.</description>
    </item>
    
    <item>
      <title>NDepend is unbelievably rich in features</title>
      <link>https://www.ipreferjim.com/2015/02/ndepend-is-unbelievably-rich-in-features/</link>
      <pubDate>Sun, 22 Feb 2015 16:52:59 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2015/02/ndepend-is-unbelievably-rich-in-features/</guid>
      <description>&lt;p&gt;I’ve recently begun evaluating &lt;a title=&#34;Visit NDepend.com&#34; href=&#34;http://www.ndepend.com/&#34; target=&#34;_blank&#34;&gt;NDepend 5.4.1&lt;/a&gt;. During the installation process, I’ll admit I was a little underwhelmed. After the Visual Studio plugin loaded, I became overwhelmed. After digging into the many features, I don’t know how or why teams operate without such tools. Let me explain…&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>io.js 1.0.1 (unstable) is out. ES6!</title>
      <link>https://www.ipreferjim.com/2015/01/io-js-1-0-1-unstable-is-out-es6/</link>
      <pubDate>Thu, 15 Jan 2015 02:51:41 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2015/01/io-js-1-0-1-unstable-is-out-es6/</guid>
      <description>A team of developers, including some core node.js developers, forked node.js a while ago into a project called io.js. They’ve just released version 1.</description>
    </item>
    
    <item>
      <title>Decorating directives with isolate scope in Angular 1.3</title>
      <link>https://www.ipreferjim.com/2014/11/decorating-directives-with-isolate-scope-in-angular-1-3/</link>
      <pubDate>Thu, 20 Nov 2014 18:29:28 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2014/11/decorating-directives-with-isolate-scope-in-angular-1-3/</guid>
      <description>A question from reddit excited my interest. Angular 1.3 apparently has broken the ability to decorate isolate scopes.
I tried version of Angular between the 1.</description>
    </item>
    
    <item>
      <title>Your interview questions probably suck</title>
      <link>https://www.ipreferjim.com/2014/11/your-interview-questions-probably-suck/</link>
      <pubDate>Fri, 14 Nov 2014 17:59:53 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2014/11/your-interview-questions-probably-suck/</guid>
      <description>I have interviewed somewhere between 200 and 300 people in my professional career. I’ve learned a lot from the process. In fact, I am planning to write a short book containing some of this “knowledge” about interviewing.</description>
    </item>
    
    <item>
      <title>SOLID Principles Presentation</title>
      <link>https://www.ipreferjim.com/2014/11/solid-principles-presentation/</link>
      <pubDate>Wed, 12 Nov 2014 23:00:28 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2014/11/solid-principles-presentation/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Your First App: Node.js is complete!</title>
      <link>https://www.ipreferjim.com/2014/10/your-first-app-node-js-is-complete/</link>
      <pubDate>Fri, 31 Oct 2014 03:54:15 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2014/10/your-first-app-node-js-is-complete/</guid>
      <description>I’m stoked to announce that I’ve finished writing my first self-published book, Your First App: node.js.
The book is a full-stack application development tutorial using what is commonly known as the ‘MEAN’ stack, but with a heavier focus on the backend technologies: node.</description>
    </item>
    
    <item>
      <title>Data at the root level is invalid. Line 1, position 1.</title>
      <link>https://www.ipreferjim.com/2014/09/data-at-the-root-level-is-invalid-line-1-position-1/</link>
      <pubDate>Sat, 06 Sep 2014 15:58:21 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2014/09/data-at-the-root-level-is-invalid-line-1-position-1/</guid>
      <description>Recently, I encountered a really weird problem with an XML document. I was trying to load a document from a string:</description>
    </item>
    
    <item>
      <title>Android Studio and Library Projects</title>
      <link>https://www.ipreferjim.com/2013/06/android-studio-and-library-projects/</link>
      <pubDate>Mon, 10 Jun 2013 05:03:17 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2013/06/android-studio-and-library-projects/</guid>
      <description>This is basically a quick brain-dump post. I have previously attempted to get into Android application development, but with only 8-10 hours of “free” time per month, it was difficult to get traction with an app before the goog machine overhauled everything.</description>
    </item>
    
    <item>
      <title>CommonJS Modules, node’s require() and private members</title>
      <link>https://www.ipreferjim.com/2013/03/commonjs-modules-nodes-require-and-private-members/</link>
      <pubDate>Sat, 02 Mar 2013 23:47:07 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2013/03/commonjs-modules-nodes-require-and-private-members/</guid>
      <description>CommonJS Modules, node’s require() and private members Interestingly, node.js module documentation doesn’t even mention CommonJS or the specification proposal it implements.</description>
    </item>
    
    <item>
      <title>Generating sprites with HTML5 canvas (node-canvas)</title>
      <link>https://www.ipreferjim.com/2012/10/generating-sprites-with-html5-canvas-node-canvas/</link>
      <pubDate>Sun, 14 Oct 2012 22:31:01 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2012/10/generating-sprites-with-html5-canvas-node-canvas/</guid>
      <description>About a week ago, I posted about drawing simple shapes in HTML5. HTML5’s Canvas isn’t only useful on the client side.</description>
    </item>
    
    <item>
      <title>Proxy Objects</title>
      <link>https://www.ipreferjim.com/2012/07/proxy-objects/</link>
      <pubDate>Sat, 07 Jul 2012 23:33:27 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2012/07/proxy-objects/</guid>
      <description>&lt;p&gt;I started to familiarize myself with proxy objects a couple of years ago when I started used Fluent NHibernate on a pretty large project. NHibernate itself proxies objects to allow the framework to do its magic. Proxies are a fantastic thing. I spoke with a friend of mine today about some advanced coding techniques including proxy objects and IoC, which made me want to write a little about some of those topics.&lt;/p&gt;
&lt;p&gt;From &lt;a href=&#34;http://en.wikipedia.org/wiki/Proxy_pattern&#34; title=&#34;Proxy pattern on Wikipedia&#34; target=&#34;_blank&#34;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A proxy, in its most general form, is a class functioning as an interface to something else. The proxy could interface to anything: a network connection, a large object in memory, a file, or some other resource that is expensive or impossible to duplicate.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Charles Bretana gave an excellent and succinct definition of proxy objects &lt;a href=&#34;http://stackoverflow.com/questions/287479/what-is-a-net-proxy-object-in-the-inversion-of-control-aspect-oriented-sense&#34; title=&#34;Click to view What is a .NET proxy object in the Inversion of Control / Aspect-Oriented sense?&#34; target=&#34;_blank&#34;&gt;on Stack Overflow&lt;/a&gt; back in 2008:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One purpose is to “pretend” to be the real class so a client component (or object) can “believe” it’s talking to the “real” object, but inside the proxy, other stuff, (like logging, transactional support, etc.) is being done at the same time… Secondly, a proxy can be very cheap in comparson to the real object,. and often is used so that the real objects can be conserved (turned off or released to a pool to be used by other clients) when the client is not using them… The proxy stays “alive” and the client thinks it still has a connection to the real object, but whenever it “calls” the object, it is actually calling the proxy, which goes and gets another real object just to handle the call, and then releases the real object when the call is done.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I’ve created an example (available &lt;a href=&#34;https://github.com/jimschubert/blogs/tree/master/2012-07-07/Proxies&#34; title=&#34;Proxies examples on github&#34; target=&#34;_blank&#34;&gt;on github&lt;/a&gt;) which demonstrates how to proxy method calls in a few different ways, ranging from very simple to using Castle.DynamicProxy and interceptors. The code is written in C# and although the code doesn’t handle some of the more advanced topics of proxy objects, such as resource pooling as Charles described, it will (I hope) introduce proxy objects in a comprehensible way.&lt;/p&gt;
&lt;p&gt;Read on for killer examples.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Debug.WriteLine</title>
      <link>https://www.ipreferjim.com/2012/06/debug-writeline/</link>
      <pubDate>Fri, 15 Jun 2012 22:21:34 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2012/06/debug-writeline/</guid>
      <description>I answered a question on StackOverflow last week which made me remember a few years ago when I also wondered, “Where does Debug.</description>
    </item>
    
    <item>
      <title>ASP.NET, AppDomains, and shadow-copying</title>
      <link>https://www.ipreferjim.com/2012/04/asp-net-appdomains-and-shadow-copying/</link>
      <pubDate>Sun, 29 Apr 2012 22:05:28 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2012/04/asp-net-appdomains-and-shadow-copying/</guid>
      <description>&lt;p&gt;I answered a &lt;a href=&#34;http://stackoverflow.com/a/4394472/151445&#34; title=&#34;Does my ASP.NET application stop executing if I overwrite the DLLs?&#34; target=&#34;_blank&#34;&gt;question on StackOverflow&lt;/a&gt; nearly two years ago, and I’m surprised at how few votes it has received, despite comments such as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;+1 for teaching me something new today thanks. -kobe&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Being one of my favorite answers, I thought I should discuss it on my blog a little more in-depth than just &lt;a href=&#34;http://www.ipreferjim.com/2011/07/what-happens-when-i-overwrite-a-dll-asp-net/&#34; title=&#34;Previous post&#34; target=&#34;_blank&#34;&gt;posting the SO answer&lt;/a&gt;. I’d like to briefly discuss what ASP.NET really is (in the context of IIS), why AppDomains are needed, and lastly what shadow-copying does for an application. There is no code associated with this post, and it is driven more by contemplation than by a specific resolution to a problem. So, I apologize in advance if it seems disjointed at times.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Allowing only a single instance of a .NET application</title>
      <link>https://www.ipreferjim.com/2012/04/allowing-only-a-single-instance-of-a-net-application/</link>
      <pubDate>Mon, 23 Apr 2012 23:13:32 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2012/04/allowing-only-a-single-instance-of-a-net-application/</guid>
      <description>In the past, whenever I constrained an application to having only a single instance running at any given time, I naively walked a list of running processes to find a process with the same name as the currently-running process.</description>
    </item>
    
    <item>
      <title>Mastering Node: Addons and FunctionTemplate (uuid.node)</title>
      <link>https://www.ipreferjim.com/2012/02/mastering-node-addons-and-functiontemplate-uuid-node/</link>
      <pubDate>Tue, 07 Feb 2012 02:41:18 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2012/02/mastering-node-addons-and-functiontemplate-uuid-node/</guid>
      <description>&lt;p&gt;Last night, I pushed an addition to my fork of Mastering Node. I decided to add a bit to the &lt;em&gt;Addons&lt;/em&gt; chapter. The first example in this chapter only shows how to add a function to a natively-compiled module (i.e. an addon). This example shows you how to start a module which can be used in the following way:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Uuid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;./uuid.node&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Uuid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;uuid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Uuid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myId&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;uuid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;generate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The project files referenced in the following text can be downloaded from the repo: &lt;a href=&#34;https://github.com/jimschubert/masteringnode&#34; title=&#34;jimschubert/masteringnode&#34; target=&#34;_blank&#34;&gt;jimschubert/masteringnode&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;functionTemplate&#34;&gt;FunctionTemplate&lt;/h2&gt;
&lt;p&gt;In v8, a FunctionTemplate is used to create the equivalent to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The function at this point is an object and not an &lt;em&gt;instance&lt;/em&gt; of the function.&lt;/p&gt;
&lt;p&gt;As an example, we will use the linux package &lt;em&gt;uuid&lt;/em&gt; to generate a uuid. We will define the header for this addon as:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dotfiles backup using GitHub</title>
      <link>https://www.ipreferjim.com/2012/01/dotfiles-backup-using-github/</link>
      <pubDate>Thu, 19 Jan 2012 01:58:12 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2012/01/dotfiles-backup-using-github/</guid>
      <description>I was recently looking for a solution to backup my configuration files (bash, vim, etc) using GitHub. After some looking around, I’ve compiled a pretty nice project for myself.</description>
    </item>
    
    <item>
      <title>Install nodejs under ChromeOS (CR-48)</title>
      <link>https://www.ipreferjim.com/2011/12/install-nodejs-under-chromeos-cr-48/</link>
      <pubDate>Fri, 23 Dec 2011 04:35:53 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2011/12/install-nodejs-under-chromeos-cr-48/</guid>
      <description>Why would I want to do this?
I’m a software developer. I love javascript. I love node.js. I love the direction Google is taking web development, user interaction, and the web in general.</description>
    </item>
    
    <item>
      <title>[c#] Instantiating an object with a private constructor</title>
      <link>https://www.ipreferjim.com/2011/08/c-instantiating-an-object-with-a-private-constructor/</link>
      <pubDate>Sat, 27 Aug 2011 18:26:43 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2011/08/c-instantiating-an-object-with-a-private-constructor/</guid>
      <description>Not too long ago, I needed to modify a type available in the the BCL which didn’t have a public constructor or any method for creating an instance of the object.</description>
    </item>
    
    <item>
      <title>[js] Closures versus Functional Scoping</title>
      <link>https://www.ipreferjim.com/2011/08/js-closures-versus-functional-scoping/</link>
      <pubDate>Sat, 27 Aug 2011 03:47:40 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2011/08/js-closures-versus-functional-scoping/</guid>
      <description>I was recently asked a very simple JavaScript question: what is a closure?
Of course, I answered it (correctly, might I add) as “it means capturing a variable inside a function”.</description>
    </item>
    
    <item>
      <title>DataAnnotations, MVC 3, and Unobtrusive Validations</title>
      <link>https://www.ipreferjim.com/2011/08/dataannotations-mvc3-unobtrusive-validations/</link>
      <pubDate>Mon, 15 Aug 2011 01:00:14 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2011/08/dataannotations-mvc3-unobtrusive-validations/</guid>
      <description>&lt;p&gt;DataAnnotations are a pretty cool introduction to .NET 3.5+. It is very useful in ASP.NET MVC 3, and I’ve written a somewhat &lt;a href=&#34;http://www.ipreferjim.com/2010/05/system-componentmodel-dataannotations-for-asp-net-web-forms/&#34; title=&#34;System.ComponentModel.DataAnnotations for ASP.NET Web Forms&#34; target=&#34;_blank&#34;&gt;naive attempt&lt;/a&gt; to use this functionality in ASP.NET Web Forms which some people have found very useful.&lt;/p&gt;
&lt;p&gt;I’d like to dig a little more in depth…&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bitwise Operations: Examples</title>
      <link>https://www.ipreferjim.com/2011/07/bitwise-operations-examples/</link>
      <pubDate>Tue, 19 Jul 2011 22:57:08 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2011/07/bitwise-operations-examples/</guid>
      <description>One post that I’ve always loved on stackoverflow is this post by Hugoware which contains some useful extension methods for bitwise operations.</description>
    </item>
    
    <item>
      <title>What happens when I overwrite a DLL (asp.net)?</title>
      <link>https://www.ipreferjim.com/2011/07/what-happens-when-i-overwrite-a-dll-asp-net/</link>
      <pubDate>Sat, 09 Jul 2011 00:46:00 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2011/07/what-happens-when-i-overwrite-a-dll-asp-net/</guid>
      <description>&lt;p&gt;I post on &lt;a href=&#34;http://stackoverflow.com/&#34; title=&#34;Stack Overflow&#34; target=&#34;_blank&#34;&gt;Stack Overflow&lt;/a&gt; a lot. Sometimes, there are really interesting questions like one I answered last year. I had forgotten about it until this week when the answer was accepted. I thought I’d share it on my blog.&lt;/p&gt;
&lt;p&gt;The original post is &lt;a href=&#34;http://stackoverflow.com/questions/4394410/does-my-asp-net-application-stop-executing-if-i-overwrite-the-dlls/4394472#4394472&#34; title=&#34;Does my ASP.NET application stop executing if I overwrite the DLLs?&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;. Read on for redundancy.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Loading newer versions of jQuery and jQuery UI (noConflict)</title>
      <link>https://www.ipreferjim.com/2011/06/loading-newer-versions-of-jquery-and-jquery-ui-noconflict/</link>
      <pubDate>Sat, 18 Jun 2011 00:22:00 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2011/06/loading-newer-versions-of-jquery-and-jquery-ui-noconflict/</guid>
      <description>&lt;p&gt;Here’s an interesting problem:&lt;/p&gt;
&lt;p&gt;You have an ASP.NET Web Forms application which references jQuery 1.3.x and would require a lot of testing to upgrade to a newer version of jQuery. You’re adding functionality to this application, and you really want to use jQuery 1.5 or jQuery 1.6 going forward with new development. &lt;strong&gt;But…&lt;/strong&gt;, jQuery 1.3.x is referenced in the master page. Also, you want to load jQuery UI 1.8.x targeting the newer version of jQuery.&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bitwise operations and Flags (C#)</title>
      <link>https://www.ipreferjim.com/2010/07/bitwise-operations-and-flags/</link>
      <pubDate>Sat, 31 Jul 2010 15:57:51 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2010/07/bitwise-operations-and-flags/</guid>
      <description>&lt;p&gt;I haven’t written anything in a while, so I thought I would finally write about the subject of bitwise operations and the FlagsAttribute.&lt;/p&gt;
&lt;p&gt;I mentioned this to one of the developers on my team, and he said that he somewhat understood bit operations but he had never found a reason to use them.&lt;/p&gt;
&lt;p&gt;Here is the code I will use to discuss the operations&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;57754&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;18782&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
			
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aXORb&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aORb&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aANDb&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aNOT&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bNOT&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
			
&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;spacer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;---------------------------------------------&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} ({1}) a&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} ({1}) b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} ({1}) a ^ b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aXORb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aXORb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spacer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;	
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} ({1}) a&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} ({1}) b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} ({1}) a | b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aORb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aORb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spacer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;	
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} ({1}) a&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} ({1}) b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} ({1}) a &amp;amp; b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aANDb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aANDb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spacer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;	
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} ({1}) a&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} ({1}) ~a&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aNOT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aNOT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} ({1}) ~(~a)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aNOT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aNOT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spacer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;	
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} ({1}) b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} ({1}) ~b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bNOT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bNOT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} ({1}) ~(~b)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bNOT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bNOT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
			
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReadLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// And, the GetBitString method
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetBitString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
	&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sizeInt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// Number of bits is bytes * 8
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// I specifically chose 16-bit values to reduce the amount displayed
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sizeInt&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;ushort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	
	&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Empty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sizeInt&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sizeInt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;--)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sizeInt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sizeInt&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;XOR ( ^ )&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From MSDN:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Binary ^ operators are predefined for the integral types and bool. For integral types, ^ computes the bitwise exclusive-OR of its operands. For bool operands, ^ computes the logical exclusive-or of its operands; that is, the result is true if and only if exactly one of its operands is true.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think of XOR as a “one-toggle”. The logic can be seen as (format is [first] : [second] –&amp;gt; [result] ):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0 : 1 --&amp;gt; 1
1 : 1 --&amp;gt; 0
1 : 0 --&amp;gt; 1
0 : 0 --&amp;gt; 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see,&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using DataAnnotation attributes to validate Membership password</title>
      <link>https://www.ipreferjim.com/2010/06/using-dataannotation-attributes-to-validate-membership-password/</link>
      <pubDate>Fri, 11 Jun 2010 19:14:59 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2010/06/using-dataannotation-attributes-to-validate-membership-password/</guid>
      <description>As a follow-up to my post on DataAnnotations in ASP.NET Web Forms, I’d like to demonstrate yet another custom attribute. Although ASP.</description>
    </item>
    
    <item>
      <title>Finding a user’s local time from UTC offset</title>
      <link>https://www.ipreferjim.com/2010/05/finding-a-users-local-time-from-utc-offset/</link>
      <pubDate>Tue, 04 May 2010 19:47:43 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2010/05/finding-a-users-local-time-from-utc-offset/</guid>
      <description>I answered a question over at StackOverflow, and I really liked the answer, so I thought I would share this nifty extension method:</description>
    </item>
    
    <item>
      <title>String Concatenation in .NET – what really goes on?</title>
      <link>https://www.ipreferjim.com/2010/03/string-concatenation-in-net-what-really-goes-on/</link>
      <pubDate>Sun, 21 Mar 2010 23:04:48 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2010/03/string-concatenation-in-net-what-really-goes-on/</guid>
      <description>There are a number of ways to concatenate a string in C# and other .NET languages. Is there a *best* way?</description>
    </item>
    
    <item>
      <title>Programming to Interfaces or Objects?</title>
      <link>https://www.ipreferjim.com/2010/03/programming-to-interfaces-or-objects/</link>
      <pubDate>Sun, 21 Mar 2010 04:46:31 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2010/03/programming-to-interfaces-or-objects/</guid>
      <description>The other day, I was asked to add some functionality to code that regularly instantiates objects as interfaces, and I was wondering what exactly is the point?</description>
    </item>
    
    <item>
      <title>Explaining advanced features of C# 3.0</title>
      <link>https://www.ipreferjim.com/2010/02/explaining-advanced-features-of-c-3-0/</link>
      <pubDate>Mon, 15 Feb 2010 23:07:30 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2010/02/explaining-advanced-features-of-c-3-0/</guid>
      <description>C# 3.0 Func delegates and Expressions In this post, I’ll attempt to clarify the meaning of Func delegates and Expressions.</description>
    </item>
    
  </channel>
</rss>