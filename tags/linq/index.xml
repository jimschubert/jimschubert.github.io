<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LINQ on I Prefer Jim</title>
    <link>https://www.ipreferjim.com/tags/linq/</link>
    <description>Recent content in LINQ on I Prefer Jim</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 06 Sep 2014 15:58:21 +0000</lastBuildDate>
    
	<atom:link href="https://www.ipreferjim.com/tags/linq/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Data at the root level is invalid. Line 1, position 1.</title>
      <link>https://www.ipreferjim.com/2014/09/data-at-the-root-level-is-invalid-line-1-position-1/</link>
      <pubDate>Sat, 06 Sep 2014 15:58:21 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2014/09/data-at-the-root-level-is-invalid-line-1-position-1/</guid>
      <description>Recently, I encountered a really weird problem with an XML document. I was trying to load a document from a string:</description>
    </item>
    
    <item>
      <title>DRY! GenericComparer&lt;TType&gt; for sorting Generic Lists</title>
      <link>https://www.ipreferjim.com/2010/04/dry-genericcomparer-for-sorting-generic-lists/</link>
      <pubDate>Thu, 22 Apr 2010 15:28:40 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2010/04/dry-genericcomparer-for-sorting-generic-lists/</guid>
      <description>I’m a pretty firm believer in the Ruby/Ruby on Rails idea of DRY (“Don’t Repeat Yourself”).
That said, I get pretty tired of writing comparers for sorting lists and generic lists.</description>
    </item>
    
    <item>
      <title>Useful Serialization Methods of LINQ to SQL objects</title>
      <link>https://www.ipreferjim.com/2009/04/useful-serialization-methods-of-linq-to-sql-objects/</link>
      <pubDate>Fri, 01 May 2009 02:40:00 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2009/04/useful-serialization-methods-of-linq-to-sql-objects/</guid>
      <description>I am just going through a project for my senior “Projects in Information Systems” class, commenting most of the complex logic.</description>
    </item>
    
    <item>
      <title>Displaying multiple fields in a Dropdownlist’s DataTextField</title>
      <link>https://www.ipreferjim.com/2009/04/displaying-multiple-fields-in-a-dropdownlists-datatextfield/</link>
      <pubDate>Tue, 14 Apr 2009 20:19:00 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2009/04/displaying-multiple-fields-in-a-dropdownlists-datatextfield/</guid>
      <description>I’ve encountered this problem on occasion, where I want to display more than one field in a dropdownlist’s DataTextField property. In the past, I’ve overcome this problem by rewriting a SQL statement, or adding another column in the database itself to accomodate my needs.</description>
    </item>
    
    <item>
      <title>LINQ: more like &#34;Luckily I Never Quit&#34;</title>
      <link>https://www.ipreferjim.com/2009/03/linq-more-like-luckily-i-never-quit/</link>
      <pubDate>Sat, 28 Mar 2009 17:07:00 +0000</pubDate>
      
      <guid>https://www.ipreferjim.com/2009/03/linq-more-like-luckily-i-never-quit/</guid>
      <description>I’ve been using LINQ quite a bit lately. As the blog title says: luckily, I never quit.
There are a lot of things to get used to with LINQ.</description>
    </item>
    
  </channel>
</rss>